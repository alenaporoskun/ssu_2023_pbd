/home/alena/lab/ssu_2023_pbd/labs/lab5/venv/bin/python3 /home/alena/lab/ssu_2023_pbd/labs/lab5/lab5.py

===============
 Check version
===============
3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]

==========================================
 NumPy: the absolute basics for beginners
==========================================

=============================
 How to create a basic array
=============================
np.array([1, 2, 3]):
 [1 2 3]
np.zeros(2):
 [0. 0.]
np.ones(2):
 [1. 1.]
np.empty(4):
 [4.67372079e-310 0.00000000e+000 6.92693207e-310 6.92693242e-310]
np.arange(5):
 [0 1 2 3 4]
np.arange(2, 12, 2):
 [ 2  4  6  8 10]
np.linspace(0, 12, num=5):
 [ 0.  3.  6.  9. 12.]
np.ones(2, dtype=np.int64):
 [1 1]

========================================
 Adding, removing, and sorting elements
========================================
arr
 [2 1 5 3 7 4 6 8]
np.sort(arr):
 [1 2 3 4 5 6 7 8]

 a  [1 2 3 4]
 b  [5 6 7 8]
np.concatenate((a, b)):
 [1 2 3 4 5 6 7 8]

=================================================
 How do you know the shape and size of an array?
=================================================
array_example:
 [[[  0   1   2   3]
  [  4   5   6   7]]

 [[ 10  20  30  40]
  [ 11  21  31  41]]

 [[100 110 120 130]
  [ 40  50  60  70]]]

array_example.ndim:
 3
array_example.size:
 24
array_example.shape:
 (3, 2, 4)

===========================
 Can you reshape an array?
===========================
a  [0 1 2 3 4 5]
a.reshape(3, 2):
 [[0 1]
 [2 3]
 [4 5]]

===============================================================================
 How to convert a 1D array into a 2D array (how to add a new axis to an array)
===============================================================================
a: [1 2 3 4 5 6]
 a.shape: (6,)
row_vector = a[np.newaxis, :]
row_vector.shape: (1, 6)
col_vector = a[:, np.newaxis]
col_vector.shape: (6, 1)

======================
 Indexing and slicing
======================
data:       [1 2 3 4 5]
data[0:2]:  [1 2]
data[1:]:   [2 3 4 5]
data[-2:]:  [4 5]
data[::-1]: [5 4 3 2 1]

a:
 [[ 0 -1 -2 -3]
 [ 1  2  3  4]
 [ 5  8 11 14]]
a[a < 5]:
 [ 0 -1 -2 -3  1  2  3  4]
five_up = (a >= 5),  a[five_up]:
 [ 5  8 11 14]
a[(a > 2) & (a < 11)]:
 [3 4 5 8]
a:
 [[ 0 -1 -2 -3]
 [ 1  2  3  4]
 [ 5  8 11 14]]
b=np.nonzero(a < 3):
 (array([0, 0, 0, 0, 1, 1]), array([0, 1, 2, 3, 0, 1]))
(row indices, column indices)
list(zip(b[0], b[1])):
 [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1)]

===========================================
 How to create an array from existing data
===========================================
a1:
 [[1 1]
 [2 2]]
 a2:
 [[3 3]
 [4 4]]
np.vstack((a1, a2)):
 [[1 1]
 [2 2]
 [3 3]
 [4 4]]
np.hstack((a1, a2)):
 [[1 1 3 3]
 [2 2 4 4]]
np.arange(1, 25).reshape(2, 12):
 [[ 1  2  3  4  5  6  7  8  9 10 11 12]
 [13 14 15 16 17 18 19 20 21 22 23 24]]

a:
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
b1 = a[0, :]:
 [1 2 3 4]
b2 = a.copy():
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
b1[0]=99:
 99
a:
 [[99  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
b2:
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]

=========================================
 Basic array operations and Broadcasting
=========================================
data:  [1 2 3]
ones:  [1 1 1]
data + ones:  [2 3 4]
data - ones:  [0 1 2]
data.sum():  6
data * 1.6:  [1.6 3.2 4.8]
data.min():  1

===================
 Creating matrices
===================
np.zeros(3):
 [0. 0. 0.]
np.ones((3, 2)):
 [[1. 1.]
 [1. 1.]
 [1. 1.]]
np.ones((2, 3, 4)):
 [[[1. 1. 1. 1.]
  [1. 1. 1. 1.]
  [1. 1. 1. 1.]]

 [[1. 1. 1. 1.]
  [1. 1. 1. 1.]
  [1. 1. 1. 1.]]]

===========================
 Generating random numbers
===========================
rng = np.random.default_rng()
rng.random(3):
 [0.26406552 0.27012117 0.5429832 ]
rng.integers(5, size=(2, 4)):
 [[4 2 2 0]
 [4 4 4 1]]

====================================
 Transposing and reshaping a matrix
====================================
data_new:
 [[0 1 2]
 [3 4 5]
 [6 7 8]]
data_new.reshape(1, 9):
 [[0 1 2 3 4 5 6 7 8]]
data_new.transpose():
 [[0 3 6]
 [1 4 7]
 [2 5 8]]

=========================
 How to reverse an array
=========================
arr:
 [1 2 3 4 5 6 7 8]
np.flip(arr):
 [8 7 6 5 4 3 2 1]

arr_2d:
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
np.flip(arr_2d):
 [[12 11 10  9]
 [ 8  7  6  5]
 [ 4  3  2  1]]

==================================================
 How to access the docstring for more information
==================================================
help(max):

Help on built-in function max in module builtins:

max(...)
    max(iterable, *[, default=obj, key=func]) -> value
    max(arg1, arg2, *args, *[, key=func]) -> value

    With a single iterable argument, return its biggest item. The
    default keyword-only argument specifies an object to return if
    the provided iterable is empty.
    With two or more arguments, return the largest argument.


====================================
 How to save and load NumPy objects
====================================
a:
 [1 2 3 4 5 6]
np.save('filename1', a)
b = np.load('filename.npy'):
 [1 2 3 4 5 6]

np.savetxt('new_file_csv.csv', a)
c = np.loadtxt('new_file_csv.csv'):
 [1. 2. 3. 4. 5. 6.]

===============================
 Importing and exporting a CSV
===============================
df:
            Artist Genre Listeners     Plays
0  Billie Holiday  Jazz   1300000  27000000
1  Jimmie Hendrix  Rock   2700000  70000000
2             SIA   Pop   2000000  74000000

df.loc[2]:
 Artist            SIA
Genre             Pop
Listeners     2000000
Plays        74000000
Name: 2, dtype: object

df2:
       calories  duration
day1       420        50
day2       380        40
day3       390        45

df2.loc["day2"]:
 calories    380
duration     40
Name: day2, dtype: int64

df2.to_csv('pd_csv.csv')
data_new = pd.read_csv('pd_csv.csv'):
   Unnamed: 0  calories  duration
0       day1       420        50
1       day2       380        40
2       day3       390        45

=================================
 Plotting arrays with Matplotlib
=================================
x:
 [0.         0.26315789 0.52631579 0.78947368 1.05263158 1.31578947
 1.57894737 1.84210526 2.10526316 2.36842105 2.63157895 2.89473684
 3.15789474 3.42105263 3.68421053 3.94736842 4.21052632 4.47368421
 4.73684211 5.        ]
y:
 [ 0.          0.52631579  1.05263158  1.57894737  2.10526316  2.63157895
  3.15789474  3.68421053  4.21052632  4.73684211  5.26315789  5.78947368
  6.31578947  6.84210526  7.36842105  7.89473684  8.42105263  8.94736842
  9.47368421 10.        ]

Process finished with exit code 0
